use owo_colors::{
    AnsiColors,
    DynColors::{self, Ansi, Rgb},
};

pub struct Colors {
    basic_colors: Vec<DynColors>,
    true_colors: Option<Vec<DynColors>>,
}

pub(crate) fn get_ascii_art(s: &str) -> &'static str {
    match s {
        {% for language, attrs in languages -%}
            r#"{{ language }}"# => "{{ attrs.ascii | addslashes }}",
        {% endfor %}
        _ => unimplemented!("{}", s),
    }
}

pub(crate) fn get_colors(s: &str, true_color: bool) -> Vec<DynColors> {
    let colors = match s {
        {% for language, attrs in languages -%}
            r#"{{ language }}"# => Colors {
                basic_colors: vec![{%- for color in attrs.colors.ansi -%}Ansi(AnsiColors::{{ color | capitalize | replace(from="White", to="Default") }}),{% endfor %}],
                true_colors: {% if attrs.colors.hex -%}
                    Some(vec![
                        {%- for hex in attrs.colors.hex -%}
                            {% set rgb = hex | hex_to_rgb -%}
                            Rgb({{ rgb.r }}, {{ rgb.g }}, {{ rgb.b }}),
                        {% endfor %}])
                {% else -%}None
                {% endif %},
            },
        {% endfor %}
        _ => unimplemented!("{}", s),
    };
    match colors.true_colors {
        Some(true_colors) if true_color => true_colors,
        _ => colors.basic_colors,
    }
}

pub fn get_circle_color(s: &str) -> DynColors {
    match s {
        {% for language, attrs in languages -%}
            {% set rgb = attrs.colors.chip | hex_to_rgb -%}
            r#"{{ language }}"# => Rgb({{ rgb.r }}, {{ rgb.g }}, {{ rgb.b }}),
        {% endfor %}
        _ => unimplemented!("{}", s),
    }
}

{% for language, attrs in languages -%}
    {% if attrs.colors.rgb %}
        {% set ansi_length = attrs.colors.ansi | length -%}
        {% set rgb_length = attrs.colors.rgb | length %}
        {% if ansi_length != rgb_length %}
            compile_error!(r#"{{ language }}: ansi and rgb colors must be the same length"#);
        {% endif %}
    {% endif -%}
{% endfor -%}

{% set max_width = 40 -%}
{# NOTE Permitting trailing newline #}
{% set max_height = 26 -%}


{% for language, attrs in languages -%}
    {% set lines = attrs.ascii | split(pat="\n") -%}
    {% set height = lines | length -%}
    {% if height > max_height %}
        compile_error!(r#"{{ language }}: ascii art must have {{ max_height - 1 }} or less lines, has {{ height }}"#);
    {% endif -%}

    {% for line in lines -%}
        {% set cleaned_line = line | strip_color_tokens -%}
        {% set width = cleaned_line | length -%}
        {% if width > max_width %}
            compile_error!(r#"{{ language }}: ascii art line {{ loop.index }} must be {{ max_width }} or less characters wide"#);
        {% endif -%}
    {% endfor -%}
{% endfor -%}
